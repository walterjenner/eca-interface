<?php
// $Id$

//NOTE: THE .module FILES SHOULD BE AS SMALL AS POSSIBLE AS THE ARE LOADED AT EVERY REQUEST!!

//include the file with the helper functions
require_once drupal_get_path('module', 'eca_main') . '/includes.inc';

/**
 * @file
 * Wrapper-Node-Type to the Artwork in the compArt DB
 */

function artwork_node_info() {
  return array(
    'artwork' => array(
      'name' => t('Artwork'),
      'module' => 'artwork',
      'description' => "Wrapper-Node-Type to the Artwork in the compArt DB",
      'has_body' => FALSE,
      'title_label' => t('Name'),
    )
  );
}

/**
 * Implementation of hook_help().
 */
function artwork_help($path, $arg) {
  $output = ''; 
  switch ($path) {
    case "admin/help#artwork":
      $output = '<p>'.  t("Wrapper-Node-Type to the Artwork in the compArt DB.") .'</p>';
      $output .= '<p>'.  t("It was developed for the ") 
        . '<a href="http://www.compart.informatik.uni-bremen.de/" title="compArt Project">compArt Project</a>' 
        . t(" at University Bremen.") .'</p>';
      break;
  }
  return $output;
}

/**
 * Called everytime cron.php is run. 
 * Updates the mapping if the timespan since last update is greater then 12h.
 * 
 * @return 
 */
function artwork_cron()
{
  $last_run = variable_get('cron_last', time());

  //if( (time() > ($last_run + NODE_SYNC_INTERVAL)) && DO_ARTWORK_SYNC ){
  if( true ){
    variable_set('cron_last', time() );
    global $userMapping;
    
    //DELETE if there is a mapping which is not in compart db anymore
    $selectDeprecated = "SELECT a.nid
                          FROM artwork a
                          LEFT JOIN compartdb.artwork ca_a
                          ON a.artwork_id = ca_a.artwork_id
                          WHERE ca_a.artwork_id IS NULL";
                          
    $resultDeprecated = db_query( $selectDeprecated );
    while( $toDelete = db_fetch_object( $resultDeprecated ) ){
      node_delete( $toDelete->nid );
      drupal_set_message( "Deleted artwork: nid: $toDelete->nid");
    }
    
    //INSERT if there is no mapping for an artwork sofar.
    $selectNew = "SELECT ca_a.artwork_id, ca_a.title, ca_at.name as artwork_type_name, ca_a.owner_id
                          FROM compartdb.artwork ca_a
                          LEFT JOIN artwork a
                          ON a.artwork_id = ca_a.artwork_id
                          LEFT JOIN compartdb.artwork_type ca_at
                          ON ca_at.artwork_type_id = ca_a.artwork_type_id 
                          WHERE a.artwork_id IS NULL";
                          
    $resultNew = db_query( $selectNew );
    while( $toInsert = db_fetch_object( $resultNew ) ){
      $toInsert->type = 'artwork';
      $toInsert->comment = 2;
      $toInsert->uid = isset($userMapping[$toInsert->owner_id])?$userMapping[$toInsert->owner_id]:0;
      node_save( $toInsert );      
      drupal_set_message( "Inserted artwork: nid: $toInsert->nid, title: $toInsert->title");
      
      //update search index     
      _node_index_node( $toInsert ); 
    }
    
    //UPDATE if the data is newer
    $selectUpdated = "SELECT ca_a.artwork_id, ca_a.title, a.nid as nid, ca_at.name as artwork_type_name, ca_a.owner_id
                FROM compartdb.artwork ca_a
                LEFT JOIN artwork a
                ON ca_a.artwork_id = a.artwork_id
                LEFT JOIN node n
                ON a.nid = n.nid
                LEFT JOIN compartdb.artwork_type ca_at
                ON ca_a.artwork_type_id = ca_at.artwork_type_id
                WHERE UNIX_TIMESTAMP(ca_a.last_change) > n.changed";
    
    $resultUpdated = db_query( $selectUpdated );
    while( $updated = db_fetch_object($resultUpdated) ){
      $n = new stdClass();
      $n->nid = $updated->nid;
      $n->vid = $n->nid; //to ensure that the title in revision table is also updated.
      $n->title = $updated->title;
      $n->uid = isset($userMapping[$updated->owner_id])?$userMapping[$updated->owner_id]:0;
      node_save( $n );
      drupal_set_message( "Updated artwork: nid: $n->nid, title: $n->title");
      
      //update search index
      _node_index_node( $n );   
    }
  }  
}

/**
* Implementation of hook_delete
 */
function artwork_delete($node) {
  //delete terms // happens automatically
  db_query("DELETE FROM artwork WHERE nid = $node->nid");
}

/**
* Implementation of hook_insert
 */
function artwork_insert($node) {
  drupal_write_record( 'artwork', $node );
  
  //TODO add automatic vocabulary creation, if v with name 'artwork_type' is not existing, insert into v, insert voc_node_type: this voc, artwork
  if( isset($node->artwork_type_name) )  {
      $terms = array('tags' => array('5' => $node->artwork_type_name ));
      taxonomy_node_save($node, $terms);   
  }
}

/**
 * Implementation of hook_update
 */
function artwork_update($node) {
  //UPDATE the terms for the node //NOTE: the node itself is changed already node_update() (=kind of super() function of this)
  if( isset($node->artwork_type_name) )  {
      $terms = array('tags' => array('5' => $node->artwork_type_name ));
      taxonomy_node_save($node, $terms);
   }
}

/**
 * Implementation of hook_perm().
 */
function artwork_perm() {
  return array('administer artworks');
}

/**
 * Implementation of hook_access
 */
function artwork_access($op, $node, $account) {
  switch($op) {
    case 'create':
      return false;
    case 'update';
      return user_access('administer artworks');
    case 'delete':
      return user_access('administer artworks');       
  }
}

/**
 * 
 * 
 * @return an array with all additional properties of this node-type
 * @param object $node
 */
function artwork_load($node) {
  $selectArtwork = "SELECT a.artwork_id, a.nid, 
                    ca_a.title, ca_a.creation_location_id, ca_a.artwork_series_id, ca_a.artwork_id as ca_a_artwork_id,
                    ca_a.algorithm_id, ca_a.artwork_type_id, ca_a.creation_year, ca_a.description, ca_a.material, 
                    ca_a.rights, UNIX_TIMESTAMP(ca_a.last_change) as last_change, ca_al.name as ca_al_name, ca_at.name as ca_at_name,
                    ca_l.city as ca_l_city, ca_l.country as ca_l_country, ca_l.description as ca_l_description
                    FROM artwork a 
                    LEFT JOIN compartdb.artwork ca_a 
                    ON a.artwork_id = ca_a.artwork_id
                    LEFT JOIN compartdb.artwork_type ca_at 
                    ON ca_a.artwork_type_id = ca_at.artwork_type_id
                    LEFT JOIN compartdb.algorithm ca_al
                    ON ca_a.algorithm_id = ca_al.algorithm_id
                    LEFT JOIN compartdb.location as ca_l
                    ON ca_a.creation_location_id = ca_l.location_id
                    WHERE nid=$node->nid";
                    
  $resultArtwork = db_query($selectArtwork);
  if( $artwork = db_fetch_object($resultArtwork ) ){    
    if(empty($artwork->ca_a_artwork_id)){
      drupal_set_message('Sorry, artwork is no longer in our database.','error', false);
      //node_delete($agent->nid); //connection is reset?
    }   
       
    //getMedia
    $artwork->media = eca_get_media(5, $artwork->artwork_id);
    
    //getArtists    
    $artwork->artists = array();
    $selectArtists = "SELECT n.title as title, n.nid as nid 
                      FROM compartdb.creating ca_c
                      LEFT JOIN agent a
                      ON ca_c.agent_id = a.agent_id
                      LEFT JOIN node n
                      ON a.nid = n.nid
                      WHERE ca_c.artwork_id = $artwork->artwork_id";
    
    $resArtist = db_query($selectArtists);
    while( $artistRow = db_fetch_object($resArtist) ) {
      array_push($artwork->artists, $artistRow);  
    }
    
    //getOwners
    $artwork->owners = array('agents' => array(), 'institutions' => array() );
    $selectOwnerships = "SELECT ca_ao.agent_id, ca_ao.institution_id FROM compartdb.artwork_ownership ca_ao WHERE artwork_id = $artwork->artwork_id";
    $resOwnerships = db_query($selectOwnerships);
    while( $ownership = db_fetch_object($resOwnerships) ){
      if($ownership->agent_id != ''){
        if( $ownerAgent = db_fetch_object( db_query("SELECT n.title, n.nid FROM node n LEFT JOIN agent a ON n.nid = a.nid WHERE a.agent_id = $ownership->agent_id") ) ){
          array_push($artwork->owners['agents'], $ownerAgent); 
        }
      }
      else if( $ownership->institution_id != '' ){
        if( $ownerInstitution = db_fetch_object( db_query("SELECT i.name, i.institution_id FROM compartdb.institution i WHERE i.institution_id = $ownership->institution_id") ) ){
          array_push($artwork->owners['institutions'], $ownerInstitution); 
        }
      }
    }
    
    //getCitations
    $artwork->citations = array();
    $selectCitations = "SELECT ca_p.title, ca_ac.publication_id 
                        FROM compartdb.artwork_citation ca_ac 
                        LEFT JOIN compartdb.publication ca_p
                        ON ca_ac.publication_id = ca_p.publication_id
                        WHERE ca_ac.artwork_id = $artwork->artwork_id";
    $resCitations = db_query($selectCitations);
    while( $citation = db_fetch_object($resCitations) ) {
      array_push($artwork->citations, $citation);  
    }
    
    //getCollections
    $artwork->collections = array();
    $selectCollections = "SELECT ca_c.name, ca_aipo.collection_id
                        FROM compartdb.artwork_is_part_of ca_aipo
                        LEFT JOIN compartdb.collection ca_c 
                        ON ca_aipo.collection_id = ca_c.collection_id
                        WHERE ca_aipo.artwork_id = $artwork->artwork_id";
    $resCollections = db_query($selectCollections);
    while( $collection = db_fetch_object($resCollections) ) {
      array_push($artwork->collections, $collection);  
    }
    
    //everything in the content array will be indexed for the search
    $artwork->content = array();
    $artwork->content['description'] = array(
      '#value' => eca_add_space($artwork->description),
      '#weight' => 0,
    );
    if(count($artwork->artists)){   
      $artwork->content['artists'] = array(
        '#value' => 'Artist(s):' . eca_add_space(return_agents_by_node($artwork->artists)),
        '#weight' => 0,
      );
    }
    if(!isEmpty($artwork->ca_l_city) || !isEmpty($artwork->ca_l_country)){
      $artwork->content['location'] = array(
        '#value' => 'Created in' . eca_add_space($artwork->ca_l_city . ' ' . $artwork->ca_l_country),
        '#weight' => 0,
      );
    }
    
    return $artwork;
  }  
}

/**
* Implementation of hook_block
* @param string $op one of "list", "view", "save" and "configure"
* @param integer $delta code to identify the block
* @param array $edit only for "save" operation
**/
function artwork_block($op = 'list', $delta = 0, $edit = array()) { 

  // YOUR MODULE CODE HERE

} 

/**
 * Implementation of hook_menu().
 *
 * You must implement hook_menu() to emit items to place in the main menu.
 * This is a required step for modules wishing to display their own pages,
 * because the process of creating the links also tells Drupal what
 * callback function to use for a given URL. The menu items returned
 * here provide this information to the menu system.
 *
 * With the below menu definitions, URLs will be interpreted as follows:
 *
 * If the user accesses http://example.com/?q=foo, then the menu system
 * will first look for a menu item with that path. In this case it will
 * find a match, and execute agent_foo().
 *
 * If the user accesses http://example.com/?q=bar, no match will be found,
 * and a 404 page will be displayed.
 *
 * If the user accesses http://example.com/?q=bar/baz, the menu system
 * will find a match and execute agent_baz().
 *
 * If the user accesses http://example.com/?q=bar/baz/1/2, the menu system
 * will first look for bar/baz/1/2. Not finding a match, it will look for
 * bar/baz/1/%. Again not finding a match, it will look for bar/baz/%/2. Yet
 * again not finding a match, it will look for bar/baz/%/%. This time it finds
 * a match, and so will execute agent_baz(1, 2). Note the parameters
 * being passed; this is a very useful technique.
 */
function artwork_menu() {
  // This is the minimum information you can provide for a menu item.
  
}

function artwork_views_api(){
  return array(
    'api' => 2
  );
}

