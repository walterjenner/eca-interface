<?php
// $Id$

//NOTE: THE .module FILES SHOULD BE AS SMALL AS POSSIBLE AS THE ARE LOADED AT EVERY REQUEST!!

/**
 * Implementation of hook_help().
 */
function eca_main_help($path, $arg) {
  $output = ''; 
  switch ($path) {
    case "admin/help#eca_main":
      $output = '<p>'.  t("Main Module to wrap compArt DB.") .'</p>';
      $output .= '<p>'.  t("It was developed for the ") 
        . '<a href="http://www.compart.informatik.uni-bremen.de/" title="compArt Project">compArt Project</a>' 
        . t(" at University Bremen.") .'</p>';
      break;
  }
  return $output;
}

/**
 * Called everytime cron.php is run. 
 * 
 * @return 
 */
function eca_main_cron()
{
  //clear block cache and eca cache
  cache_clear_all( NULL, 'cache_block' );
  //note: those items have a minimum lifetime, 
  //before that has passed they won't be flushed. see includes.inc
  cache_clear_all( NULL, 'cache_eca' );
}

function eca_main_update_index(){
  global $last_change_pub, $last_id_pub, $last_change_inst, $last_id_inst;
  
  register_shutdown_function('eca_main_update_shutdown');
  
  $last_id_pub = variable_get('eca_main_cron_last_id_pub', 0);
  $last_change_pub = variable_get('eca_main_cron_last_change_pub', 0);
  $last_id_inst = variable_get('eca_main_cron_last_id_inst', 0);
  $last_change_inst = variable_get('eca_main_cron_last_change_inst', 0);
  
  //ADD PUBLICATIONS 
  db_set_active('compart');
  $resultPublication = db_query("SELECT publication_id, title, last_change
                    FROM {publication}
                    WHERE (publication_id > %d) OR (last_change > %d)
                    ORDER BY last_change ASC", $last_id_pub, $last_change_pub);
  db_set_active('default');                   
  while($data = db_fetch_object($resultPublication)){
      $last_change_pub = $data->last_change;
      $last_id_pub = $data->publication_id;
     // watchdog("index publ",$data->title );
      search_index($data->publication_id, 'publication', $data->title);
  }
    
  //ADD INSTITUTIONS
  db_set_active('compart');
  $resultInstitution = db_query("SELECT institution_id, name, last_change
                      FROM {institution}
                      WHERE (institution_id > %d) OR (last_change > %d)
                      ORDER BY last_change ASC", $last_id_inst, $last_change_inst);
  
  db_set_active('default');        
  while($data = db_fetch_object($resultInstitution)){
      $last_change_inst = $data->last_change;
      $last_id_inst = $data->institution_id;
      // watchdog("index inst",$data->name );
      search_index($data->institution_id, 'institution', $data->name);
  }                    
                  
  
}

function eca_main_update_shutdown(){
  global $last_change_pub, $last_id_pub, $last_change_inst, $last_id_inst;
  if( $last_change_pub && $last_id_pub ){
    variable_set('eca_main_cron_last_id_pub', $last_id_pub);
    variable_set('eca_main_cron_last_table_pub', $last_table_pub);
    
  }
  if( $last_change_inst && $last_id_inst ){
    variable_set('eca_main_cron_last_id_inst', $last_id_inst);
    variable_set('eca_main_cron_last_table_inst', $last_table_inst);
  }
}

function eca_main_search($op = 'search', $keys = NULL){
  switch($op){
    case 'name':
      return t('All Content'); //must add an own search tab!
    case 'reset':
      variable_del(eca_main_cron_last_id_pub);
      variable_del(eca_main_cron_last_change_pub);
      variable_del(eca_main_cron_last_id_inst);
      variable_del(eca_main_cron_last_change_inst);
      return;
    case 'search':
      //search publications
      $hits = do_search($keys, 'publication');
      $results = array();
      foreach($hits as $item){
        db_set_active('compart');
        $publication = db_fetch_object( db_query("SELECT publication_id, title, last_change
                            FROM {publication}
                            WHERE publication_id = %d", $item->sid ));
        db_set_active('default');
        
        $results[] = array(
          'link' => url('publication/'.$item->sid),
          'type' => 'Publication',
          'title' => $publication->title,
          'date' => $publication->last_change,
          'score' => $item->score);
      }
      
      $hits = do_search($keys, 'institution');
      $resultsInstitution = array();
      foreach($hits as $item){
        db_set_active('compart');
        $institution = db_fetch_object( db_query("SELECT institution_id, name, last_change
                            FROM {institution}
                            WHERE institution_id = %d", $item->sid ));
        db_set_active('default');
        
        $resultsInstitution[] = array(
          'link' => url('institution/'.$item->sid),
          'type' => 'Institution',
          'title' => $institution->name,
          'date' => $institution->last_change,
          'score' => $item->score);
      }
      
      $results = array_merge($resultsInstitution, $results);
      
      $node_results = node_search($op, $keys);
      $results = array_merge($node_results, $results);
      
      return $results;
  }
}

/**
 * Implementation of hook_perm().
 */
function eca_main_perm() {
  return array('administer eca_main');
}

/**
* Implementation of hook_block
* @param string $op one of "list", "view", "save" and "configure"
* @param integer $delta code to identify the block
* @param array $edit only for "save" operation
**/
function eca_main_block($op = 'list', $delta = 0, $edit = array()) { 
  
  global $nid;

  if ($op == "list") {
    // Generate listing of blocks from this module, for the admin/block page
    $block = array();
    $block[0]["info"] = t('Artists Block');
    $block[0]["cache"] = BLOCK_CACHE_PER_PAGE;
    $block[1]["info"] = t('Artworks Block');
    $block[1]["cache"] = BLOCK_CACHE_PER_PAGE;
    $block[2]["info"] = t('Exhibitions Block');
    $block[2]["cache"] = BLOCK_CACHE_PER_PAGE;
    $block[3]["info"] = t('Publications Block'); 
    $block[3]["cache"] = BLOCK_CACHE_PER_PAGE;
    $block[4]["info"] = t('Part of Series Block');
    $block[4]["cache"] = BLOCK_CACHE_PER_PAGE;
    $block[5]["info"] = t('Part of Collective Block');  
    $block[5]["cache"] = BLOCK_CACHE_PER_PAGE;
    $block[6]["info"] = t('Artworks owned Block');  
    $block[6]["cache"] = BLOCK_CACHE_PER_PAGE;         
        
    return $block;
  }
  else if($op == "view")
  {
    
    if ($node = menu_get_object()) {
      //$block['subject'] = 'This is the Subject';
      switch( $delta )
      {
        //ARTISTS BLOCK
        case 0:
          if($node->type == 'exhibition') {          
            $block['title'] = t('Artists shown');            
            $selectArtists = "SELECT SQL_CALC_FOUND_ROWS ca_a.agent_id, ca_a.first_name, ca_a.last_name, a.nid 
                                FROM compartDB.agent ca_a LEFT JOIN agent a ON ca_a.agent_id = a.agent_id 
                                WHERE ca_a.agent_id IN 
                                  (SELECT ca_ei.agent_id FROM compartDB.exhibits_in ca_ei 
                                    WHERE ca_ei.exhibition_id = $node->exhibition_id) 
                                ORDER BY ca_a.last_name 
                                LIMIT " . RELATED_ITEM_LIMIT;
            $resultAgent = db_query($selectArtists);
            //fetch the total num of result ignoring the LIMIT statement
            $selectTotalRows = db_query("SELECT FOUND_ROWS()");
            if( $totalNum = db_fetch_array( $selectTotalRows ) )
              $totalNum = $totalNum['FOUND_ROWS()'];
              
            if($totalNum > RELATED_ITEM_LIMIT )
              $block['numSnippet'] .= ' ('.RELATED_ITEM_LIMIT . ' of '.$totalNum.')';
              
            $numRes = 0;
            while ($agent = db_fetch_object($resultAgent)) {
              $numRes++;
              $block['content'] .= '<span class="tag tag-agent">' . l($agent->first_name . ' ' . $agent->last_name, 'node/'.$agent->nid, array('attributes' => array('title' => $agent->first_name . ' ' . $agent->last_name)) ) . '&nbsp;</span>';  
            }                        
            $block['content'] .= '<div class="all-link all-link-agent">' . l('<span>Show all ' . $totalNum . ' Artists</span>', "node/2497", array('query' => "args=$node->exhibition_id", 'html' => true)) . '</div>';        
          }
          break;
        // ARTWORKS BLOCK
        case 1:
          if($node->type == 'exhibition') {
            $block['title'] = t('Artworks shown');
            $fromTable = "compartDB.showing_artwork ft";
            $whereField = "exhibition_id = $node->exhibition_id";
            $moreLinkHref = "node/3118";
            $query = "args=$node->exhibition_id";
          }
          else if($node->type == 'agent'){
            $block['title'] = t('Artwork');
            $fromTable = "compartDB.creating ft";
            $whereField = "agent_id = $node->agent_id";
            $moreLinkHref = "node/2498";
            $query = "args=$node->agent_id";
          }
          else
            break; //if it is not agent or exhibition dont show this block
            
          //artworks          
          $selectAw = "SELECT SQL_CALC_FOUND_ROWS ca_a.artwork_id, ca_a.title, ca_a.creation_year, a.nid, ca_mf.file_name, ca_mf.format
                       FROM $fromTable 
                       LEFT JOIN artwork a ON a.artwork_id = ft.artwork_id
                       LEFT JOIN compartDB.artwork ca_a ON ca_a.artwork_id = a.artwork_id  
                       LEFT JOIN compartDB.illustrated_by ca_i ON (ca_i.row_id = a.artwork_id AND ca_i.table_id = 5)
                       LEFT JOIN compartDB.media_file ca_mf ON ca_mf.media_file_id = ca_i.media_file_id 
                       WHERE $whereField
                       GROUP BY a.nid
                       ORDER BY ca_a.title  
                       LIMIT " . RELATED_ITEM_LIMIT;
          
          $resultAw = db_query($selectAw);
          //fetch the total num of result ignoring the LIMIT statement
          $selectTotalRows = db_query("SELECT FOUND_ROWS()");
          if( $totalNum = db_fetch_array( $selectTotalRows ) )
            $totalNum = $totalNum['FOUND_ROWS()'];
          
          if($totalNum > RELATED_ITEM_LIMIT )
            $block['numSnippet'] .= ' ('.RELATED_ITEM_LIMIT . ' of '.$totalNum.')';
            
          $numRes = 0;
          
          $block['content'] .= '<div id="artworks-carousel"><div class="carousel-prev"></div><div class="carousel"><ul>';                
          while ($artwork = db_fetch_object($resultAw)) {
            $numRes++;
            $block['content'] .= return_artwork_thumb( $artwork, $node->artwork_id != $artwork->artwork_id );                  
          }
          $block['content'] .= '</ul></div><div class="carousel-next"></div></div><div class="clear-both"></div>';
          
          //collections
          if($node->type == 'exhibition'){
            $selectColl = "SELECT ca_c.collection_id, ca_c.name FROM compartDB.collection ca_c WHERE ca_c.collection_id IN (SELECT ca_sc.collection_id FROM compartDB.showing_collection ca_sc WHERE ca_sc.exhibition_id = $node->exhibition_id) ORDER BY ca_c.name";
            $resultColl = db_query($selectColl);
            $first = true;
            while ($collection = db_fetch_object($resultColl)) {
              if($first){ 
                $first = false; 
                $block['content'] .= '<h4>Collections shown:</h4>';
              }
              $numRes ++;              
              $block['content'] .= return_collection( $collection );
            }              
          }
          $block['content'] .= '<div class="all-link all-link-artwork">' . l('<span>Show all ' . $totalNum . ' Artworks</span>', $moreLinkHref, array('query'=>$query, 'html' => true) ) . '</div>';
          
          //if( $node->type == 'agent' )
            //$block['content'] .= '<a href="../artwork_list2/' . $node->agent_id .'">Gallery</a>';
                              
          break;
          //EXHIBITION BLOCK
          case 2:
            if($node->type == 'agent') {       
              $block['title'] = t('Exhibitions participated');
              $fromTable = 'compartDB.exhibits_in';
              $whereField = "agent_id = $node->agent_id";
            }
            else if ($node->type == 'artwork'){
              $block['title'] = t('Shown at those Exhibitions');
              $fromTable = 'compartDB.showing_artwork';
              $whereField = "artwork_id = $node->artwork_id";
            }
            else {
              break; //if it is not agent or artwork dont show this block
            }
            $selectEx = "SELECT SQL_CALC_FOUND_ROWS ca_e.exhibition_id, ca_e.name, e.nid 
                          FROM compartDB.exhibition ca_e LEFT JOIN exhibition e ON ca_e.exhibition_id = e.exhibition_id 
                          WHERE ca_e.exhibition_id IN 
                            (SELECT exhibition_id FROM $fromTable WHERE $whereField) 
                          ORDER BY ca_e.name 
                          LIMIT " . RELATED_ITEM_LIMIT;
            $resultEx = db_query($selectEx);
            //fetch the total num of result ignoring the LIMIT statement
            $selectTotalRows = db_query("SELECT FOUND_ROWS()");
            if( $totalNum = db_fetch_array( $selectTotalRows ) )
              $totalNum = $totalNum['FOUND_ROWS()'];
            
            if($totalNum > RELATED_ITEM_LIMIT )
              $block['numSnippet'] .= ' ('.RELATED_ITEM_LIMIT . ' of '.$totalNum.')';
              
            $numRes = 0;
            while ($exhibition = db_fetch_object($resultEx)) {
              $numRes++;
              $block['content'] .= '<span class="tag tag-exhibition">' . l(_filter_url_trim($exhibition->name, URL_LENGTH), 'node/'.$exhibition->nid, array('attributes' => array('title' => $exhibition->name))) . '</span>';
            }
            
            if($node->type=="agent")
              $block['content'] .= '<div class="all-link all-link-exhibition">' . l('<span>Show all ' . $totalNum . ' Exhibitions</span>', "node/2499", array('query' => "args=$node->agent_id", 'html' => true) ) . '</div>';
                                          
            break;
          //PUBLICATIONS BLOCK
          case 3:
            if($node->type == 'agent') {
              $block['title'] = t('Publications');
              $selectPub = "SELECT SQL_CALC_FOUND_ROWS publication_id, title 
                              FROM compartDB.publication WHERE publication_id IN 
                              (SELECT publication_id FROM compartDB.authorship WHERE agent_id = $node->agent_id) 
                           ORDER BY title 
                           LIMIT " . RELATED_ITEM_LIMIT;
              $resultPub = db_query($selectPub);
              //fetch the total num of result ignoring the LIMIT statement
              $selectTotalRows = db_query("SELECT FOUND_ROWS()");
              if( $totalNum = db_fetch_array( $selectTotalRows ) )
                $totalNum = $totalNum['FOUND_ROWS()'];
              
              if($totalNum > RELATED_ITEM_LIMIT )
                $block['numSnippet'] .= ' ('.RELATED_ITEM_LIMIT . ' of '.$totalNum.')';
              
              $numRes = 0;
              while ($dataPub = db_fetch_object($resultPub)) {
                $numRes++;
                $block['content'] .= '<span class="tag tag-publication">' . l( _filter_url_trim($dataPub->title, URL_LENGTH) , 'publication/'.$dataPub->publication_id, array( 'attributes' => array('title' => $dataPub->title, 'class' => 'dialog-link') )) . '</span>';
              }
              $block['content'] .= '<div class="all-link all-link-publication">' . l('<span>Show all ' . $totalNum . ' Publications</span>', 'publications', array('query' => "args=$node->agent_id", 'html' => true) ) .'</div>';      
            }
            break;
            //'PART OF SERIES' BLOCK
            case 4:
              if($node->type == 'artwork' && $node->artwork_series_id != 0) {
                $block['title'] = t('Part of Series');
                $resultSer = db_query("SELECT ca_as.name, ca_as.description 
                                        FROM compartDB.artwork_series ca_as 
                                        WHERE ca_as.artwork_series_id = $node->artwork_series_id 
                                        ORDER BY ca_as.name");
                if ($series = db_fetch_object($resultSer)) {
                  $block['content'] .= '<h3>'. $series->name . '</h3>';
                  if( !is_empty($series->description) )
                    $block['content'] .= check_markup( $series->description, TEXTILE_FORMAT_ID, false );
                }                
                $resultWorks = db_query("SELECT ca_a.artwork_id, ca_a.title, ca_a.creation_year, a.nid, ca_mf.file_name, ca_mf.format 
                                          FROM compartDB.artwork ca_a 
                                          LEFT JOIN artwork a ON ca_a.artwork_id = a.artwork_id 
                                          LEFT JOIN compartDB.illustrated_by ca_i ON (ca_i.row_id = a.artwork_id AND ca_i.table_id = 5)
                                          LEFT JOIN compartDB.media_file ca_mf ON ca_mf.media_file_id = ca_i.media_file_id
                                          WHERE ca_a.artwork_series_id = $node->artwork_series_id
                                          GROUP BY a.nid 
                                          ORDER BY ca_a.title");
                $numRes = 0;
                
                //ALL WORKS FROM THIS SERIES
                $block['content'] .= '<h4>'. t('All works from this series') . '</h4>'; 
                $block['content'] .= '<div id="artwork-series-carousel"><div class="carousel-prev"></div><div class="carousel"><ul>';                
                while ($artwork = db_fetch_object($resultWorks)) {
                  $numRes++;
                  $block['content'] .= return_artwork_thumb( $artwork, $node->artwork_id != $artwork->artwork_id );                  
                }
                $block['content'] .= '</ul></div><div class="carousel-next"></div></div><div class="clear-both"></div>';
              }
              break;
            //'PART OF COLLECTIVE' BLOCK
            case 5:
              if($node->type == 'agent') {
                $block['title'] = t('Part of Collective');
                //get collective, of which this artist is part of
                $resultColl = db_query("SELECT ca_c.name, ca_c.description, ca_c.collective_id FROM compartDB.collective ca_c WHERE ca_c.collective_id IN (SELECT collective_id FROM compartDB.agent_is_part_of WHERE agent_id = $node->agent_id) ORDER BY ca_c.name");
                while ($collective = db_fetch_object($resultColl)) {
                  $block['content'] .= '<h4>'. $collective->name . '</h4>';
                  if( $collective->description != '' )
                    $block['content'] .= check_markup( $collective->description, TEXTILE_FORMAT_ID, false );
                  
                  //get all artists from this collective
                  $resultA = db_query("SELECT ca_a.first_name, ca_a.last_name, a.nid FROM compartDB.agent_is_part_of ca_aipo LEFT JOIN compartDB.agent ca_a ON ca_aipo.agent_id = ca_a.agent_id LEFT JOIN agent a ON ca_a.agent_id = a.agent_id WHERE ca_aipo.collective_id = $collective->collective_id ORDER BY ca_a.last_name");
                  $numRes = 0;
                  while ($artist = db_fetch_object($resultA)) {
                    $numRes++;
                    if($numRes==1){
                       $block['content'] .= '<span class="label">'. t('All members') . ':&nbsp;</span>'; 
                    }  
                    if($node->nid == $artist->nid)
                      $block['content'] .= '<span class="tag tag-agent-active">' .  _filter_url_trim($artist->first_name . ' ' . $artist->last_name, URL_LENGTH) . '</span>';
                    else
                      $block['content'] .= '<span class="tag tag-agent">' . l( _filter_url_trim($artist->first_name . ' ' . $artist->last_name, URL_LENGTH) , 'node/'.$artist->nid, array( 'attributes' => array('title' => $artist->first_name . ' ' . $artist->last_name) )) . '</span>';
                  }                  
                }
              }
              break;
            //'ARTWORKS OWNED' BLOCK
            case 6:
              if($node->type == 'agent') {
                $block['title'] = t('Artworks owned');
                $selArtworks = "SELECT ca_a.artwork_id, ca_a.title, a.nid 
                                FROM compartDB.artwork ca_a 
                                LEFT JOIN artwork a ON ca_a.artwork_id = a.artwork_id 
                                WHERE ca_a.artwork_id IN 
                                  (SELECT artwork_id FROM compartDB.artwork_ownership ca_ao WHERE ca_ao.agent_id = $node->agent_id) 
                                ORDER BY ca_a.title";
                
                $resArtworks = db_query( $selArtworks );
                $numRes = 0;
                while( $artwork = db_fetch_object( $resArtworks ) ){
                  $numRes++;
                  $block['content'] .= return_artwork( $artwork );  
                }
                
                $selCollections = "SELECT ca_c.collection_id, ca_c.name 
                                    FROM compartDB.collection ca_c 
                                    WHERE ca_c.collection_id IN 
                                      (SELECT ca_co.collection_id FROM compartDB.collection_ownership ca_co WHERE ca_co.agent_id = $node->agent_id)
                                    ORDER BY ca_c.name";
                                    
                $resCollections = db_query( $selCollections );
                $numRes2 = 0;
                while( $collection = db_fetch_object( $resCollections ) ){
                  if($numRes2 == 0 )
                    $block['content'] .= '<h4>' . t(Collections) . '</h4>';
                   
                  $numRes2++; 
                  $block['content'] .= return_collection( $collection );   
                }                    
                $numRes += $numRes2;                
              }
            break;
      }       
      if($numRes == 0)
        $block = 0; 
          
      return $block;
    }       
  } //endif $op == view
}

/**
 * Change the default search which is used by the finder module from 'node' to 'eca_main'
 * by adding an own finder preprocess function, using the same technique as in 
 * finder_search.module line 52 ongoing.
 */
function eca_main_theme_registry_alter(&$theme_registry) {
  variable_set('eca_main_finder_results_theme', $theme_registry['finder_results']['function']);
  $theme_registry['finder_results']['function'] = 'eca_main_preprocess_finder_results';
}
/**
 * Intervene before theme function.
 *
 * Kind of like a template preprocess, except not for a template.
 *
 * @see finder_search_theme_registry_alter()
 */
function eca_main_preprocess_finder_results($results, $finder, $keywords, $pager, $params, $form_state) {
  $theme_func = variable_get('eca_main_finder_results_theme', 'theme_finder_results');

  if ($finder->settings['advanced']['search'] && empty($results)) {
    $keys = array();
    foreach ($keywords as $finder_element_id => $finder_element_keywords) {
      foreach ((array)$finder_element_keywords as $keyword) {
        $keys[] = $keyword;
      }
    }
    $results_array = finder_search_get_result(implode(' ', $keys), 'eca_main');
    $results = theme('finder_search_results', $results_array, $finder, $form_state);

    // search module has it's own pager
    $pager = 0;
  }

  return $theme_func($results, $finder, $keywords, $pager, $params, $form_state);

}


/**
 * Implementation of hook_menu().
 *
 * You must implement hook_menu() to emit items to place in the main menu.
 * This is a required step for modules wishing to display their own pages,
 * because the process of creating the links also tells Drupal what
 * callback function to use for a given URL. The menu items returned
 * here provide this information to the menu system.
 *
 * With the below menu definitions, URLs will be interpreted as follows:
 *
 * If the user accesses http://example.com/?q=foo, then the menu system
 * will first look for a menu item with that path. In this case it will
 * find a match, and execute agent_foo().
 *
 * If the user accesses http://example.com/?q=bar, no match will be found,
 * and a 404 page will be displayed.
 *
 * If the user accesses http://example.com/?q=bar/baz, the menu system
 * will find a match and execute agent_baz().
 *
 * If the user accesses http://example.com/?q=bar/baz/1/2, the menu system
 * will first look for bar/baz/1/2. Not finding a match, it will look for
 * bar/baz/1/%. Again not finding a match, it will look for bar/baz/%/2. Yet
 * again not finding a match, it will look for bar/baz/%/%. This time it finds
 * a match, and so will execute agent_baz(1, 2). Note the parameters
 * being passed; this is a very useful technique.
 */
function eca_main_menu() {
  $items['agent'] = array(
    'title' => 'Agent',
    'page callback' => 'eca_main_agent',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
  );
  $items['exhibition'] = array(
    'title' => 'Exhibition',
    'page callback' => 'eca_main_exhibition',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
  );
  $items['artwork'] = array(
    'title' => 'Artwork',
    'page callback' => 'eca_main_artwork',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
  );
  $items['award'] = array(
    'title' => 'Award',
    'page callback' => 'eca_main_award',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
  );
  $items['publication'] = array(
    'title' => 'Publication',
    'page callback' => 'eca_main_publication',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
  );
  $items['collective'] = array(
    'title' => 'Collective',
    'page callback' => 'eca_main_collective',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
  );
  $items['institution'] = array(
    'title' => 'Institution',
    'page callback' => 'eca_main_institution',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
  );
  $items['algorithm'] = array(
    'title' => 'Algorithm',
    'page callback' => 'eca_main_algorithm',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
  );
  $items['collection'] = array(
    'title' => 'Collection',
    'page callback' => 'eca_main_collection',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
  );
  return $items;  
}
/*
 * Specifies that this module implements the Views API
 * Then the views module is looking for hooks in here.
 */
function eca_main_views_api(){
  return array(
    'api' => 2
  );
}
  

